package com.game.module.copy;

import org.springframework.beans.factory.annotation.Autowired;

import com.game.data.CopyConfig;
import com.game.module.attach.endless.EndlessLogic;
import com.game.module.attach.experience.ExperienceAttach;
import com.game.module.attach.experience.ExperienceLogic;
import com.game.module.attach.treasure.TreasureAttach;
import com.game.module.attach.treasure.TreasureLogic;
import com.game.module.daily.DailyService;
import com.game.module.friend.FriendService;
import com.game.module.player.Player;
import com.game.module.player.PlayerService;
import com.game.module.scene.SceneService;
import com.game.module.shop.ShopService;
import com.game.module.team.TeamService;
import com.game.params.CopyReward;
import com.game.params.EndlessInfo;
import com.game.params.Int2Param;
import com.game.params.IntParam;
import com.game.params.ListParam;
import com.game.params.Reward;
import com.game.params.copy.CopyResult;
import com.game.params.copy.ExperienceInfo;
import com.game.params.copy.SEnterCopy;
import com.game.params.copy.TreasureInfo;
import com.game.params.scene.CMonster;
import com.game.util.ConfigData;
import com.server.anotation.Command;
import com.server.anotation.Extension;
import com.server.util.ServerLogger;

@Extension
public class CopyExtension {

	@Autowired
	private CopyService copyService;
	@Autowired
	private PlayerService playerService;
	@Autowired
	private FriendService friendService;
	@Autowired
	private SceneService sceneService;
	@Autowired
	private DailyService dailyService;
	@Autowired
	private ShopService shopService;
	@Autowired
	private EndlessLogic endlessLogic;
	@Autowired
	private TreasureLogic treasureLogic;
	@Autowired
	private ExperienceLogic experienceLogic;
	@Autowired
	private TeamService teamService;

	// 获取副本信息
	@Command(1901)
	public Object getInfo(int playerId, Object param) {
		return copyService.getCopys(playerId);
	}

	// 进入副本
	public static final int ENTER_COPY = 1902;
	@Command(1902)
	public Object enter(int playerId, IntParam param) {
		int copyId = param.param;
		int result = copyService.enter(playerId, copyId);

		Player player = playerService.getPlayer(playerId);
		int copyInstanceId = player.getCopyId();

		CopyInstance instance = copyService.getCopyInstance(copyInstanceId);

		SEnterCopy returnResult = new SEnterCopy();
		returnResult.code = result;

		if (instance != null) {
			CopyConfig cfg = ConfigData.getConfig(CopyConfig.class, instance.getPassId());
			returnResult.sceneId = cfg.scenes[0];// 第一个场景id
			returnResult.copyId = instance.getCopyId();
			returnResult.passId = instance.getPassId();
		}
		return returnResult;
	}

	// 领取奖励
	@Command(1903)
	public Object getRewards(int playerId, CopyResult result) {
		Player player = playerService.getPlayer(playerId);
		int copyInstanceId = player.getCopyId();
		if (copyInstanceId == 0) {
			ServerLogger.warn("Err CopyId:", copyInstanceId);
			return null;
		}
		CopyInstance instance = copyService.getCopyInstance(copyInstanceId);
		int copyId = instance.getCopyId();
		// 验证副本结果
		if (!copyService.checkCopyResult(playerId, instance, result)) {
			return null;
		}

		copyService.getRewards(playerId, copyId, result);
		// 更新次数,星级
		copyService.updateCopy(playerId, instance, result);
		
		// 清除
		copyService.removeCopy(playerId);
		//触发神秘商店
		result.showMystery = shopService.triggerMysteryShop(playerId, copyId, result);

		return result;
	}

	// 杀死怪
	@Command(1905)
	public Object killMonster(int playerId, CMonster monster) {
		return copyService.killMonster(playerId, monster);
	}

	// 刷新副本
	public static final int CMD_GETINFO = 1901;
	public static final int CMD_REFRESH = 1906;

	// 复活
	@Command(1907)
	public Object revive(int playerId, Int2Param copy) {
		int result = copyService.revive(playerId, copy.param1, copy.param2);
		IntParam code = new IntParam();
		code.param = result;
		return code;
	}

	// 副本扫荡
	@Command(1908)
	public Object swipCopy(int playerId, Int2Param copy) {
		CopyReward result = copyService.swipeCopy(playerId, copy.param1, copy.param2);
		dailyService.refreshDailyVo(playerId);
		return result;
	}

	// 星级宝箱
	@Command(1909)
	public Object getStarRewards(int playerId, IntParam id) {
		IntParam code = new IntParam();
		code.param = copyService.get3starReward(playerId, id.param);
		return code;
	}
	
	//结束无尽漩涡
	@Command(1910)
	public Object stopEndless(int playerId, Object param){
		IntParam code = new IntParam();
		code.param = endlessLogic.stopEndless(playerId);
		return code;
	}
	
	//重置无尽漩涡
	@Command(1911)
	public Object resetEndless(int playerId, Object param){
		IntParam code = new IntParam();
		code.param = endlessLogic.resetEndless(playerId);
		return code;
	}
	
	//扫荡无尽漩涡
	@Command(1912)
	public Object clearEndless(int playerId, Object param){
		IntParam code = new IntParam();
		code.param = endlessLogic.clearEndless(playerId);
		return code;
	}
	
	//领取无尽奖励
	@Command(1913)
	public ListParam<Reward> takeEndlessRweard(int playerId, IntParam param){
		return endlessLogic.takeEndlessReward(playerId, param.param > 0);
	}
	
	//获取无尽漩涡信息
	@Command(1914)
	public EndlessInfo getEndlessInfo(int playerId, Object param){
		return endlessLogic.getEndlessInfo(playerId);
	}
	
	//获取金币副本信息
	@Command(1915)
	public TreasureInfo getTreasureInfo(int playerId, Object param){
		TreasureInfo info = new TreasureInfo();
		TreasureAttach attach = treasureLogic.getAttach(playerId);
		info.challenge = attach.getChallenge();
		info.buyTime = attach.getBuyTime();
		info.lastChallengeTime = attach.getLastChallengeTime();
		return info;
	}
	
	//购买金币副本挑战次数
	@Command(1916)
	public IntParam buyTreasureChallenge(int playerId, Object param){
		IntParam result = new IntParam();
		result.param = treasureLogic.buyChallengeTime(playerId);
		return result;
	}
	
	//扫荡金币副本
	@Command(1917)
	public CopyReward sweepTreasure(int playerId, IntParam param){
		return treasureLogic.sweep(playerId, param.param);
	}
	
	//获取经验副本信息
	@Command(1918)
	public ExperienceInfo getExperienceInfo(int playerId, Object param){
		ExperienceInfo info = new ExperienceInfo();
		ExperienceAttach attach = experienceLogic.getAttach(playerId);
		info.challenge = attach.getChallenge();
		info.buyTime = attach.getBuyTime();
		info.lastChallengeTime = attach.getLastChallengeTime();
		return info;
	}
	
	//购买经验副本挑战次数
	@Command(1919)
	public IntParam buyExperienceChallenge(int playerId, Object param){
		IntParam result = new IntParam();
		result.param = experienceLogic.buyChallengeTime(playerId);
		return result;
	}
	
	//扫荡经验副本
	@Command(1920)
	public CopyReward sweepExperience(int playerId, IntParam param){
		return experienceLogic.sweep(playerId, param.param);
	}
}
